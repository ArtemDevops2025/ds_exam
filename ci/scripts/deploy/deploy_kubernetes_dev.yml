.deploy_kubernenets_dev_template:
  before_script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/$SSH_KEY_NAME.pem
    - chmod 600 ~/.ssh/$SSH_KEY_NAME.pem
    - |
      if [ -z "$MASTER_IP" ]; then
        echo "MASTER_IP is not set. Please configure this variable in CI/CD settings."
        exit 1
      fi
    - echo -e "Host $MASTER_IP\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
    - echo "Starting deployment to ${ENVIRONMENT} environment at $(date)"
  script:
  # Create directories and transfer files
  - echo "Setting up remote environment..."
  - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "mkdir -p ~/$REMOTE_DIR-${ENVIRONMENT}"
  - scp -i ~/.ssh/$SSH_KEY_NAME.pem $KUBERNETES_DIR/environments/dev/*.yaml ubuntu@$MASTER_IP:~/$REMOTE_DIR-${ENVIRONMENT}/
  - scp -i ~/.ssh/$SSH_KEY_NAME.pem $KUBERNETES_DIR/patches/* ubuntu@$MASTER_IP:~/$REMOTE_DIR-${ENVIRONMENT}/ || echo "No patches to copy"
  - scp -i ~/.ssh/$SSH_KEY_NAME.pem $KUBERNETES_DIR/wp-config-map.yaml ubuntu@$MASTER_IP:~/$REMOTE_DIR-${ENVIRONMENT}/
  
  # Copy QA test files to remote server
  - echo "Copying QA test files to remote server..."
  - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "mkdir -p ~/$REMOTE_DIR-${ENVIRONMENT}/tests"
  - scp -i ~/.ssh/$SSH_KEY_NAME.pem $KUBERNETES_DIR/tests/* ubuntu@$MASTER_IP:~/$REMOTE_DIR-${ENVIRONMENT}/tests/ || echo "No test files to copy"
  - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "chmod +x ~/$REMOTE_DIR-${ENVIRONMENT}/tests/*.sh || true"
  
  # Fix potential pre-existing issues
  - echo "Preparing Kubernetes cluster..."
  - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'sudo kubectl delete -A ValidatingWebhookConfiguration ingress-nginx-admission || true'"
  
  # Core deployments - apply in specific order
  - echo "Deploying core infrastructure..."
  - |
    ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'cd ~/$REMOTE_DIR-${ENVIRONMENT} &&
    echo \"Creating namespace...\" &&
    sudo kubectl apply -f namespace.yaml &&
    echo \"Applying secrets...\" &&
    sudo kubectl apply -f s3-secret.yaml &&
    echo \"Creating persistent volumes...\" &&
    sudo kubectl apply -f wordpress-pvc.yaml &&
    echo \"Applying config map...\" &&
    sudo kubectl apply -f wp-config-map.yaml'"
  
  # Database deployment
  - echo "Deploying database..."
  - |
    ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'cd ~/$REMOTE_DIR-${ENVIRONMENT} &&
    sudo kubectl apply -f mysql-deployment.yaml &&
    echo \"Waiting for MySQL to be ready...\" &&
    timeout $DEPLOYMENT_TIMEOUT bash -c \"until sudo kubectl get pods -n wordpress-${ENVIRONMENT} -l tier=mysql -o jsonpath=\\\"{.items[0].status.phase}\\\" | grep -q Running; do sleep 5; done\" || echo \"MySQL deployment timed out but continuing\"'"
  
  # Fix MySQL service selector - using a patch file approach to avoid quoting issues
  - echo "Fixing MySQL service selector..."
  - |
    ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "
      echo '[{\"op\": \"replace\", \"path\": \"/spec/selector\", \"value\": {\"app\": \"wordpress-mysql\", \"tier\": \"mysql\"}}]' > patch.json
      sudo kubectl patch svc wordpress-mysql -n wordpress-${ENVIRONMENT} --type=json --patch-file patch.json || true
      rm patch.json
    "
  
  # Application deployment
  - echo "Deploying WordPress application..."
  - |
    ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'cd ~/$REMOTE_DIR-${ENVIRONMENT} &&
    sudo kubectl apply -f wordpress-deployment.yaml &&
    echo \"Waiting for WordPress to be ready...\" &&
    timeout $DEPLOYMENT_TIMEOUT bash -c \"until sudo kubectl get pods -n wordpress-${ENVIRONMENT} -l app=wordpress,environment=${ENVIRONMENT} -o jsonpath=\\\"{.items[0].status.phase}\\\" | grep -q Running; do sleep 5; done\" || echo \"WordPress deployment timed out but continuing\"'"
  
  # Network configuration
  - echo "Configuring network resources..."
  - |
    ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'cd ~/$REMOTE_DIR-${ENVIRONMENT} &&
    echo \"Creating services...\" &&
    sudo kubectl apply -f wordpress-service.yaml &&
    sudo kubectl apply -f wordpress-loadbalancer.yaml &&
    echo \"Waiting for services to be assigned IPs...\" &&
    timeout 60 bash -c \"until sudo kubectl get svc wordpress-lb -n wordpress-${ENVIRONMENT} -o jsonpath=\\\"{.spec.clusterIP}\\\" | grep -q -v none; do sleep 2; done\" || echo \"Service IP assignment timed out but continuing\"'"
  
  # Ingress configuration
  - echo "Configuring ingress..."
  - |
    ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'cd ~/$REMOTE_DIR-${ENVIRONMENT} &&
    echo \"Applying ingress...\" &&
    sudo kubectl apply -f ingress.yaml || echo \"Ingress creation failed but continuing deployment\"'"
  
  - echo "WordPress deployment to ${ENVIRONMENT} environment completed successfully at $(date)!"