stages:
  - lint
  - validate
  - build
  - deploy
  - monitoring
  - verify
  - qa
  - cleanup

variables:
  MASTER_IP: ""  # CI/CD variable
  SSH_KEY_NAME: "ds_exam_key"
  KUBERNETES_DIR: "kubernetes"
  REMOTE_DIR: "wordpress"
  MONITORING_DIR: "monitoring"
  WORDPRESS_PORT: "30080"  # NodePort for ingress
  DEPLOYMENT_TIMEOUT: "300"

lint:
  stage: lint
  image: alpine:latest
  script:
    - echo "Linting YAML files for best practices..."
    - apk add --no-cache yamllint
    - |
      cat > .yamllint <<'EOF'
      extends: default
      rules:
        line-length: disable
        comments:
          min-spaces-from-content: 1
      EOF
    - yamllint -c .yamllint $KUBERNETES_DIR/*.yaml || echo "Linting found issues, but continuing pipeline"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "development"
    - if: $CI_COMMIT_BRANCH == "monitoring"
  allow_failure: true

validate:
  stage: validate
  image: alpine:latest
  script:
    - echo "Validating Kubernetes manifests..."
    - apk add --no-cache grep jq
    - |
      for file in $KUBERNETES_DIR/*.yaml; do
        echo "Checking $file"
        grep -q "apiVersion:" $file || { echo "Missing apiVersion in $file"; exit 1; }
        grep -q "kind:" $file || { echo "Missing kind in $file"; exit 1; }
        grep -q "metadata:" $file || { echo "Missing metadata in $file"; exit 1; }
        if grep -q "kind: Deployment" $file; then
          grep -q "replicas:" $file || echo "Warning: No replicas specified in Deployment $file"
          grep -q "resources:" $file || echo "Warning: No resource limits/requests in Deployment $file"
        fi
      done
    - echo "All Kubernetes manifests are valid!"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "development"
    - if: $CI_COMMIT_BRANCH == "monitoring"

build:
  stage: build
  image: alpine:latest
  script:
    - echo "Building WordPress configuration and deployment artifacts..."
    - apk add --no-cache jq openssl bash
    
    - echo "Creating QA test scripts..."
    - bash scripts/qa-tests.sh
    
    - mkdir -p $KUBERNETES_DIR/patches
    - |
      cat > $KUBERNETES_DIR/patches/mysql-service-patch.json <<'MYSQL_PATCH'
      [
        {
          "op": "replace",
          "path": "/spec/selector",
          "value": {
            "app": "wordpress-mysql",
            "tier": "mysql"
          }
        }
      ]
      MYSQL_PATCH
    
    - mkdir -p $KUBERNETES_DIR/configmaps
    - |
      cat > $KUBERNETES_DIR/configmaps/wp-config.php <<'WP_CONFIG'
      <?php
      define('DB_NAME', 'wordpress');
      define('DB_USER', 'wordpress');
      define('DB_PASSWORD', getenv('WORDPRESS_DB_PASSWORD'));
      define('DB_HOST', 'wordpress-mysql');
      define('DB_CHARSET', 'utf8');
      define('DB_COLLATE', '');

      define('AUTH_KEY',         '$(openssl rand -hex 16)');
      define('SECURE_AUTH_KEY',  '$(openssl rand -hex 16)');
      define('LOGGED_IN_KEY',    '$(openssl rand -hex 16)');
      define('NONCE_KEY',        '$(openssl rand -hex 16)');
      define('AUTH_SALT',        '$(openssl rand -hex 16)');
      define('SECURE_AUTH_SALT', '$(openssl rand -hex 16)');
      define('LOGGED_IN_SALT',   '$(openssl rand -hex 16)');
      define('NONCE_SALT',       '$(openssl rand -hex 16)');

      $table_prefix = 'wp_';
      define('WP_DEBUG', true);
      define('WP_DEBUG_LOG', true);
      define('WP_DEBUG_DISPLAY', false);
      define('WP_HOME', 'http://' . $_SERVER['HTTP_HOST']);
      define('WP_SITEURL', 'http://' . $_SERVER['HTTP_HOST']);

      if (!defined('ABSPATH')) {
        define('ABSPATH', __DIR__ . '/');
      }

      require_once ABSPATH . 'wp-settings.php';
      WP_CONFIG
    
    - |
      cat > $KUBERNETES_DIR/wp-config-map.yaml <<'CONFIGMAP'
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: wordpress-config
        namespace: wordpress
      data:
        wp-config.php: |
      $(sed 's/^/          /' $KUBERNETES_DIR/configmaps/wp-config.php)
      CONFIGMAP
    
    - echo "Build artifacts successfully created!"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "development"
    - if: $CI_COMMIT_BRANCH == "monitoring"
  artifacts:
    paths:
      - $KUBERNETES_DIR/
    expire_in: 1 week

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client bash coreutils
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/$SSH_KEY_NAME.pem
    - chmod 600 ~/.ssh/$SSH_KEY_NAME.pem
    - echo -e "Host $MASTER_IP\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
    - echo "Starting deployment at $(date)"
  script:
    - echo "Setting up remote environment..."
    - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "mkdir -p ~/$REMOTE_DIR"
    - scp -i ~/.ssh/$SSH_KEY_NAME.pem $KUBERNETES_DIR/*.yaml ubuntu@$MASTER_IP:~/$REMOTE_DIR/
    - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "ls -la ~/$REMOTE_DIR/"
    - echo "Copying patches if they exist..."
    - scp -i ~/.ssh/$SSH_KEY_NAME.pem $KUBERNETES_DIR/patches/* ubuntu@$MASTER_IP:~/$REMOTE_DIR/ || echo "No patches to copy"
    - echo "Preparing Kubernetes cluster..."
    - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'sudo kubectl delete -A ValidatingWebhookConfiguration ingress-nginx-admission || true'"
    - echo "Deploying namespace..."
    - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'cd ~/$REMOTE_DIR && sudo kubectl apply -f namespace.yaml'"
    - echo "Deploying secrets..."
    - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'cd ~/$REMOTE_DIR && sudo kubectl apply -f s3-secret.yaml'"
    - echo "Deploying PVC..."
    - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'cd ~/$REMOTE_DIR && sudo kubectl apply -f wordpress-pvc.yaml'"
    - echo "Deploying MySQL..."
    - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'cd ~/$REMOTE_DIR && sudo kubectl apply -f mysql-deployment.yaml'"
    - echo "Waiting for MySQL to be ready..."
    - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'sleep 30'"
    - echo "Fixing MySQL service selector..."
    - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'sudo kubectl patch svc wordpress-mysql -n wordpress --type=json -p=\"[{\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/selector\\\", \\\"value\\\": {\\\"app\\\": \\\"wordpress-mysql\\\", \\\"tier\\\": \\\"mysql\\\"}}]\"'"
    - echo "Deploying WordPress..."
    - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'cd ~/$REMOTE_DIR && sudo kubectl apply -f wordpress-deployment.yaml'"
    - echo "Waiting for WordPress to be ready..."
    - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'sleep 45'"
    - echo "Deploying services..."
    - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'cd ~/$REMOTE_DIR && sudo kubectl apply -f wordpress-service.yaml'"
    - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'cd ~/$REMOTE_DIR && sudo kubectl apply -f wordpress-loadbalancer.yaml'"
    - echo "Configuring ingress..."
    - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'cd ~/$REMOTE_DIR && sed -i \"s/host:.*/host: $MASTER_IP.nip.io/g\" wordpress-ingress.yaml'"
    - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'cd ~/$REMOTE_DIR && sudo kubectl apply -f wordpress-ingress.yaml'"
    - echo "WordPress deployment completed successfully at $(date)!"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "development"
    - if: $CI_COMMIT_BRANCH == "monitoring"
  environment:
    name: $CI_COMMIT_BRANCH
    url: http://$MASTER_IP:$WORDPRESS_PORT
  artifacts:
    paths:
      - $KUBERNETES_DIR/
    expire_in: 1 week


monitoring:
  stage: monitoring
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client bash
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/$SSH_KEY_NAME.pem
    - chmod 600 ~/.ssh/$SSH_KEY_NAME.pem
    - echo -e "Host $MASTER_IP\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
  script:
    - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "mkdir -p ~/$MONITORING_DIR/prometheus ~/$MONITORING_DIR/grafana"
    - scp -i ~/.ssh/$SSH_KEY_NAME.pem $KUBERNETES_DIR/monitoring/monitoring-namespace.yaml ubuntu@$MASTER_IP:~/$MONITORING_DIR/
    - scp -i ~/.ssh/$SSH_KEY_NAME.pem $KUBERNETES_DIR/monitoring/prometheus/*.yaml ubuntu@$MASTER_IP:~/$MONITORING_DIR/prometheus/
    - scp -i ~/.ssh/$SSH_KEY_NAME.pem $KUBERNETES_DIR/monitoring/grafana/*.yaml ubuntu@$MASTER_IP:~/$MONITORING_DIR/grafana/
    - |
      ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP <<'ENDSSH'
      sudo kubectl apply -f ~/$MONITORING_DIR/monitoring-namespace.yaml
      sudo kubectl apply -f ~/$MONITORING_DIR/prometheus/
      sudo kubectl apply -f ~/$MONITORING_DIR/grafana/

      timeout 120 bash -c "until sudo kubectl get pods -n monitoring -l app=prometheus -o jsonpath='{.items[0].status.phase}' | grep -q Running; do sleep 5; done" || echo "Prometheus timed out"
      timeout 120 bash -c "until sudo kubectl get pods -n monitoring -l app=grafana -o jsonpath='{.items[0].status.phase}' | grep -q Running; do sleep 5; done" || echo "Grafana timed out"
      ENDSSH
    - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "sudo kubectl get all -n monitoring"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "development"
    - if: $CI_COMMIT_BRANCH == "monitoring"
  needs:
    - deploy
  environment:
    name: $CI_COMMIT_BRANCH-monitoring
    url: http://$MASTER_IP:30300


verify:
  stage: verify
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client curl bash jq
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/$SSH_KEY_NAME.pem
    - chmod 600 ~/.ssh/$SSH_KEY_NAME.pem
    - echo -e "Host $MASTER_IP\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
  script:
    - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "sudo kubectl get pods,svc,ingress,pvc -n wordpress"
    - sleep 45
    
    - |
      RESPONSE=$(ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP <<'ENDSSH'
      CLUSTER_IP=$(sudo kubectl get svc wordpress-lb -n wordpress -o jsonpath='{.spec.clusterIP}')
      curl -s -o /dev/null -w "%{http_code}" http://$CLUSTER_IP
      ENDSSH
      )
      echo "ClusterIP Check: $RESPONSE"
    
    - |
      NODEPORT_RESPONSE=$(ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP <<'ENDSSH'
      curl -L -s -o /dev/null -w "%{http_code}" http://$MASTER_IP:32412
      ENDSSH
      )
      echo "NodePort Check: $NODEPORT_RESPONSE"
    
    - |
      PROMETHEUS_STATUS=$(ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP <<'ENDSSH'
      curl -s -o /dev/null -w "%{http_code}" http://localhost:30909
      ENDSSH
      )
      echo "Prometheus Status: $PROMETHEUS_STATUS"
    
    - |
      GRAFANA_STATUS=$(ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP <<'ENDSSH'
      curl -s -o /dev/null -w "%{http_code}" http://localhost:30300
      ENDSSH
      )
      echo "Grafana Status: $GRAFANA_STATUS"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "development"
    - if: $CI_COMMIT_BRANCH == "monitoring"
  needs:
    - deploy
    - monitoring

qa:
  stage: qa
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client curl bash php php-mysqli
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/$SSH_KEY_NAME.pem
    - chmod 600 ~/.ssh/$SSH_KEY_NAME.pem
    - echo -e "Host $MASTER_IP\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
  script:
    - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "cd ~/$REMOTE_DIR && ./tests/api-tests.sh $MASTER_IP"
    
    - |
      ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP <<'ENDSSH'
      WP_POD=$(sudo kubectl get pod -l app=wordpress -n wordpress -o jsonpath="{.items[0].metadata.name}")
      sudo kubectl cp ~/$REMOTE_DIR/tests/unit-tests.php wordpress/$WP_POD:/tmp/unit-tests.php
      sudo kubectl exec $WP_POD -n wordpress -- php /tmp/unit-tests.php
      ENDSSH
    
    - |
      ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP <<'ENDSSH'
      ADMIN_EXPOSED=$(curl -s -o /dev/null -w "%{http_code}" http://$MASTER_IP:32412/wp-admin/install.php)
      VERSION_CHECK=$(curl -s http://$MASTER_IP:32412 | grep -c "meta name=\"generator\"" || true)
      ENDSSH
    
    - |
      ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP <<'ENDSSH'
      curl -s -w "Time: %{time_total}s\n" -o /dev/null http://$MASTER_IP:32412
      for i in {1..5}; do
        curl -s http://$MASTER_IP:32412 > /dev/null &
      done
      wait
      ENDSSH
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "development"
  needs:
    - verify
  allow_failure: true

cleanup:
  stage: cleanup
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client bash
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/$SSH_KEY_NAME.pem
    - chmod 600 ~/.ssh/$SSH_KEY_NAME.pem
    - echo -e "Host $MASTER_IP\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
  script:
    - |
      if [ "$CI_COMMIT_BRANCH" == "main" ]; then
        exit 0
      fi
    
    - |
      ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP <<'ENDSSH'
      sudo kubectl delete ingress,svc,deployment,statefulset,configmap,secret -n wordpress --all
      timeout 60 bash -c "until [ \$(sudo kubectl get pods -n wordpress --no-headers | wc -l) -eq 0 ]; do sleep 5; done" || true
      sudo kubectl delete pvc -n wordpress --all
      sudo kubectl delete namespace wordpress
      rm -rf ~/$REMOTE_DIR
      ENDSSH
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
    - if: $CI_COMMIT_BRANCH == "development"
      when: manual
  environment:
    name: $CI_COMMIT_BRANCH
    action: stop   