stages:
  - prepare
  - lint
  - validate
  - build
  - deploy
  - monitoring
  - verify
  - qa
  - cleanup

variables:
  MASTER_IP: ""  # CI/CD variable
  SSH_KEY_NAME: "ds_exam_key"
  KUBERNETES_DIR: "kubernetes"
  REMOTE_DIR: "wordpress"
  WORDPRESS_PORT: "30080"  # NodePort for ingress
  DEPLOYMENT_TIMEOUT: "300"  
  CUSTOM_IMAGE: "${CI_REGISTRY_IMAGE}/k3s-pipeline:latest" 

build-pipeline-image:
  stage: prepare
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    # Erstelle das SSH-Setup-Skript
    - |
      cat > ssh-setup.sh <<'EOF'
      #!/bin/bash
      
      if [ -z "$SSH_PRIVATE_KEY" ]; then
        echo "SSH_PRIVATE_KEY is not set. Please configure this variable in CI/CD settings."
        exit 1
      fi

      if [ -z "$MASTER_IP" ]; then
        echo "MASTER_IP is not set. Please configure this variable in CI/CD settings."
        exit 1
      fi

      if [ -z "$SSH_KEY_NAME" ]; then
        SSH_KEY_NAME="ds_exam_key"
      fi

      # SSH configuration
      mkdir -p ~/.ssh
      echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/$SSH_KEY_NAME.pem
      chmod 600 ~/.ssh/$SSH_KEY_NAME.pem
      echo -e "Host $MASTER_IP\n\tStrictHostKeyChecking no\n" > ~/.ssh/config

      echo "SSH configuration completed successfully"
      EOF
      
      chmod +x ssh-setup.sh
    
    # Erstelle das Dockerfile
    - |
      cat > Dockerfile <<EOF
      FROM alpine:latest

      # Install all required packages
      RUN apk add --no-cache \\
          bash \\
          coreutils \\
          curl \\
          grep \\
          jq \\
          openssh-client \\
          openssl \\
          php \\
          php-mysqli \\
          yamllint

      # Set working directory
      WORKDIR /app

      # Set default shell to bash
      SHELL ["/bin/bash", "-c"]

      # Create .ssh directory for later use
      RUN mkdir -p /root/.ssh && chmod 700 /root/.ssh

      # Copy SSH setup script
      COPY ssh-setup.sh /usr/local/bin/
      RUN chmod +x /usr/local/bin/ssh-setup.sh

      # Set environment variables
      ENV KUBERNETES_DIR="kubernetes" \\
          REMOTE_DIR="wordpress" \\
          MONITORING_DIR="monitoring" \\
          WORDPRESS_PORT="30080" \\
          DEPLOYMENT_TIMEOUT="300"
      EOF
    
    # Bauen und Pushen des Docker-Images
    - docker build -t $CUSTOM_IMAGE .
    - docker push $CUSTOM_IMAGE
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "asm"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "development"
    - if: $CI_COMMIT_BRANCH == "monitoring"

# Make sure all files follow best practices
lint:
  stage: lint
  image: $CUSTOM_IMAGE
  script:
    - echo "Linting YAML files for best practices..."
    - |
      cat > .yamllint <<EOF
      extends: default
      rules:
        line-length: disable
        comments:
          min-spaces-from-content: 1
      EOF
    - yamllint -c .yamllint $KUBERNETES_DIR/*.yaml || echo "Linting found issues, but continuing pipeline"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "asm"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "development"
    - if: $CI_COMMIT_BRANCH == "monitoring"
  allow_failure: true
  needs:
    - build-pipeline-image

# Validate Kubernetes manifests
validate:
  stage: validate
  image: $CUSTOM_IMAGE
  script:
    - echo "Validating Kubernetes manifests..."
    - |
      for file in $KUBERNETES_DIR/*.yaml; do
        echo "Checking $file"
        grep -q "apiVersion:" $file || (echo "Missing apiVersion in $file" && exit 1)
        grep -q "kind:" $file || (echo "Missing kind in $file" && exit 1)
        grep -q "metadata:" $file || (echo "Missing metadata in $file" && exit 1)
        if grep -q "kind: Deployment" $file; then
          grep -q "replicas:" $file || echo "Warning: No replicas specified in Deployment $file"
          grep -q "resources:" $file || echo "Warning: No resource limits/requests in Deployment $file"
        fi
      done
    - echo "All Kubernetes manifests are valid!"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "asm"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "development"
    - if: $CI_COMMIT_BRANCH == "monitoring"
  needs:
    - build-pipeline-image



build:
  stage: build
  image: $CUSTOM_IMAGE
  script:
    - echo "Building WordPress configuration and deployment artifacts..."
    - |
      # Execute the QA test script to create test files
      echo "Creating QA test scripts..."
      bash scripts/qa-tests.sh
      
      # Generate MySQL service patch file
      mkdir -p $KUBERNETES_DIR/patches
      cat > $KUBERNETES_DIR/patches/mysql-service-patch.json <<EOF
      [
        {
          "op": "replace", 
          "path": "/spec/selector", 
          "value": {
            "app": "wordpress-mysql", 
            "tier": "mysql"
          }
        }
      ]
      EOF
      
      # Generate wp-config.php with secure random keys
      mkdir -p $KUBERNETES_DIR/configmaps
      cat > $KUBERNETES_DIR/configmaps/wp-config.php <<EOF
      <?php
      define( 'DB_NAME', 'wordpress' );
      define( 'DB_USER', 'wordpress' );
      define( 'DB_PASSWORD', getenv('WORDPRESS_DB_PASSWORD') );
      define( 'DB_HOST', 'wordpress-mysql' );
      define( 'DB_CHARSET', 'utf8' );
      define( 'DB_COLLATE', '' );

      define( 'AUTH_KEY',         '$(openssl rand -hex 16)' );
      define( 'SECURE_AUTH_KEY',  '$(openssl rand -hex 16)' );
      define( 'LOGGED_IN_KEY',    '$(openssl rand -hex 16)' );
      define( 'NONCE_KEY',        '$(openssl rand -hex 16)' );
      define( 'AUTH_SALT',        '$(openssl rand -hex 16)' );
      define( 'SECURE_AUTH_SALT', '$(openssl rand -hex 16)' );
      define( 'LOGGED_IN_SALT',   '$(openssl rand -hex 16)' );
      define( 'NONCE_SALT',       '$(openssl rand -hex 16)' );

      \$table_prefix = 'wp_';

      define( 'WP_DEBUG', true );
      define( 'WP_DEBUG_LOG', true );
      define( 'WP_DEBUG_DISPLAY', false );

      // Dynamic site URL based on request
      define('WP_HOME', 'http://' . \$_SERVER['HTTP_HOST']);
      define('WP_SITEURL', 'http://' . \$_SERVER['HTTP_HOST']);

      if ( ! defined( 'ABSPATH' ) ) {
        define( 'ABSPATH', __DIR__ . '/' );
      }

      require_once ABSPATH . 'wp-settings.php';
      EOF
      
      # Create ConfigMap YAML for wp-config.php
      cat > $KUBERNETES_DIR/wp-config-map.yaml <<EOF
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: wordpress-config
        namespace: wordpress
      data:
        wp-config.php: |
      $(sed 's/^/    /' $KUBERNETES_DIR/configmaps/wp-config.php)
      EOF
      
      echo "Build artifacts successfully created!"
  rules:
    - if: $CI_COMMIT_BRANCH == "asm"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "development"
    - if: $CI_COMMIT_BRANCH == "monitoring"
  artifacts:
    paths:
      - $KUBERNETES_DIR/
    expire_in: 1 week
  needs:
    - build-pipeline-image

deploy:
  stage: deploy
  image: $CUSTOM_IMAGE
  before_script:
    - /usr/local/bin/ssh-setup.sh
    - echo "Starting deployment at $(date)"

  script:
    # Create directories and transfer files
    - echo "Setting up remote environment..."
    - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "mkdir -p ~/$REMOTE_DIR"
    - scp -i ~/.ssh/$SSH_KEY_NAME.pem $KUBERNETES_DIR/*.yaml ubuntu@$MASTER_IP:~/$REMOTE_DIR/
    - scp -i ~/.ssh/$SSH_KEY_NAME.pem $KUBERNETES_DIR/patches/* ubuntu@$MASTER_IP:~/$REMOTE_DIR/ || echo "No patches to copy"
    
    # Copy QA test files to remote server
    - echo "Copying QA test files to remote server..."
    - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "mkdir -p ~/$REMOTE_DIR/tests"
    - scp -i ~/.ssh/$SSH_KEY_NAME.pem $KUBERNETES_DIR/tests/* ubuntu@$MASTER_IP:~/$REMOTE_DIR/tests/ || echo "No test files to copy"
    - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "chmod +x ~/$REMOTE_DIR/tests/*.sh || true"
    
    # Fix potential pre-existing issues
    - echo "Preparing Kubernetes cluster..."
    - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'sudo kubectl delete -A ValidatingWebhookConfiguration ingress-nginx-admission || true'"
    
    # Core deployments
    - echo "Deploying core infrastructure..."
    - |
      ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'cd ~/$REMOTE_DIR &&
      echo \"Creating namespace...\" &&
      sudo kubectl apply -f namespace.yaml &&
      echo \"Applying secrets...\" &&
      sudo kubectl apply -f s3-secret.yaml &&
      echo \"Creating persistent volumes...\" &&
      sudo kubectl apply -f wordpress-pvc.yaml'"
    
    # Database deployment
    - echo "Deploying database..."
    - |
      ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'cd ~/$REMOTE_DIR &&
      sudo kubectl apply -f mysql-deployment.yaml &&
      echo \"Waiting for MySQL to be ready...\" &&
      timeout $DEPLOYMENT_TIMEOUT bash -c \"until sudo kubectl get pods -n wordpress -l tier=mysql -o jsonpath=\\\"{.items[0].status.phase}\\\" | grep -q Running; do sleep 5; done\" || echo \"MySQL deployment timed out but continuing\"'"
    
    # Fix MySQL service selector - using a patch file approach to avoid quoting issues
    - echo "Fixing MySQL service selector..."
    - |
      ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "
        echo '[{\"op\": \"replace\", \"path\": \"/spec/selector\", \"value\": {\"app\": \"wordpress-mysql\", \"tier\": \"mysql\"}}]' > patch.json
        sudo kubectl patch svc wordpress-mysql -n wordpress --type=json --patch-file patch.json
        rm patch.json
      "
    
    # Application deployment
    - echo "Deploying WordPress application..."
    - |
      ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'cd ~/$REMOTE_DIR &&
      sudo kubectl apply -f wordpress-deployment.yaml &&
      echo \"Waiting for WordPress to be ready...\" &&
      timeout $DEPLOYMENT_TIMEOUT bash -c \"until sudo kubectl get pods -n wordpress -l app=wordpress,tier!=mysql -o jsonpath=\\\"{.items[0].status.phase}\\\" | grep -q Running; do sleep 5; done\" || echo \"WordPress deployment timed out but continuing\"'"
    
    # Network configuration
    - echo "Configuring network resources..."
    - |
      ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'cd ~/$REMOTE_DIR &&
      echo \"Creating services...\" &&
      sudo kubectl apply -f wordpress-service.yaml &&
      sudo kubectl apply -f wordpress-loadbalancer.yaml &&
      echo \"Waiting for services to be assigned IPs...\" &&
      timeout 60 bash -c \"until sudo kubectl get svc wordpress-lb -n wordpress -o jsonpath=\\\"{.spec.clusterIP}\\\" | grep -q -v none; do sleep 2; done\" || echo \"Service IP assignment timed out but continuing\"'"
    
    # Ingress configuration with parameterized host
    - echo "Configuring ingress..."
    - |
      ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'cd ~/$REMOTE_DIR &&
      echo \"Updating ingress host with current IP...\" &&
      sed -i \"s/host:.*/host: $MASTER_IP.nip.io/g\" wordpress-ingress.yaml &&
      echo \"Waiting for ingress controller to be ready...\" &&
      sleep 45 &&
      sudo kubectl apply -f wordpress-ingress.yaml || echo \"Ingress creation failed but continuing deployment\"'"
    
    - echo "WordPress deployment completed successfully at $(date)!"
  rules:
    - if: $CI_COMMIT_BRANCH == "asm"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "development"
    - if: $CI_COMMIT_BRANCH == "monitoring"
  environment:
    name: $CI_COMMIT_BRANCH
    url: http://$MASTER_IP:$WORDPRESS_PORT
  artifacts:
    paths:
      - $KUBERNETES_DIR/
    expire_in: 1 week
  needs:
    - build

monitoring:
  stage: monitoring
  image: $CUSTOM_IMAGE
  before_script:
    - /usr/local/bin/ssh-setup.sh
    - echo "Starting monitoring setup at $(date)"
  script:
    - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "mkdir -p ~/$MONITORING_DIR/prometheus ~/$MONITORING_DIR/grafana"
    - scp -i ~/.ssh/$SSH_KEY_NAME.pem $KUBERNETES_DIR/monitoring/monitoring-namespace.yaml ubuntu@$MASTER_IP:~/$MONITORING_DIR/
    - scp -i ~/.ssh/$SSH_KEY_NAME.pem $KUBERNETES_DIR/monitoring/prometheus/*.yaml ubuntu@$MASTER_IP:~/$MONITORING_DIR/prometheus/
    - scp -i ~/.ssh/$SSH_KEY_NAME.pem $KUBERNETES_DIR/monitoring/grafana/*.yaml ubuntu@$MASTER_IP:~/$MONITORING_DIR/grafana/
    - >
      ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "
        sudo kubectl apply -f ~/$MONITORING_DIR/monitoring-namespace.yaml &&
        sudo kubectl apply -f ~/$MONITORING_DIR/prometheus/ &&
        sudo kubectl apply -f ~/$MONITORING_DIR/grafana/ &&
        timeout 120 bash -c 'until sudo kubectl get pods -n monitoring -l app=prometheus -o jsonpath=\"{.items[0].status.phase}\" | grep -q Running; do sleep 5; done' ||
        echo 'Prometheus timed out' &&
        timeout 120 bash -c 'until sudo kubectl get pods -n monitoring -l app=grafana -o jsonpath=\"{.items[0].status.phase}\" | grep -q Running; do sleep 5; done' ||
        echo 'Grafana timed out'
      "
    - ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "sudo kubectl get all -n monitoring"
  rules:
    - if: $CI_COMMIT_BRANCH == "asm"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "development"
    - if: $CI_COMMIT_BRANCH == "monitoring"
  needs:
    - deploy
  environment:
    name: $CI_COMMIT_BRANCH-monitoring
    url: http://$MASTER_IP:30300


# Verify deployment is working correctly  !!!!!!!!!!!!!!
verify:
  stage: verify
  image: $CUSTOM_IMAGE
  before_script:
    - /usr/local/bin/ssh-setup.sh
    - echo "Starting verification at $(date)"
  script:
    # Check resources status
    - |
      echo "Pod Status:"
      ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'sudo kubectl get pods -n wordpress -o wide'"
    - |
      echo "Service Status:"
      ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'sudo kubectl get svc -n wordpress'"
    - |
      echo "Ingress Status:"
      ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'sudo kubectl get ingress -n wordpress || echo \"No ingress found but continuing verification\"'"
    - |
      echo "PVC Status:"
      ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'sudo kubectl get pvc -n wordpress'"
    
    - echo "Waiting for services to be fully available..."
    - sleep 45
    
    # Check application accessibility - ClusterIP
    - |
      echo "Checking WordPress availability via LoadBalancer cluster IP..."
      RESPONSE=$(ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'export CLUSTER_IP=\$(sudo kubectl get svc wordpress-lb -n wordpress -o jsonpath={.spec.clusterIP}) && curl -s --retry 5 --retry-delay 10 -o /dev/null -w %{http_code} http://\${CLUSTER_IP}'") || echo "LoadBalancer check failed, but continuing verification"
      echo "ClusterIP Check Result: $RESPONSE"
      if [[ "$RESPONSE" == "200" ]]; then echo "✅ ClusterIP check passed"; else echo "⚠️ ClusterIP check returned non-200 response"; fi
    
    # Check application accessibility - NodePort (with redirect following)
    - |
      echo "Checking WordPress availability via NodePort..."
      RESPONSE=$(ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'curl -L -s --retry 5 --retry-delay 10 -o /dev/null -w %{http_code} http://$MASTER_IP:32412'") || echo "NodePort check failed, but continuing verification"
      echo "NodePort Check Result: $RESPONSE"
      if [[ "$RESPONSE" == "200" ]]; then echo "✅ NodePort check passed"; else echo "⚠️ NodePort check returned non-200 response"; fi
    
    # Check Ingress controller status
    - |
      echo "Checking Ingress controller status..."
      ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'sudo kubectl get pods -n ingress-nginx || echo \"Checking alternative namespace...\" && sudo kubectl get pods -n kube-system -l app.kubernetes.io/name=ingress-nginx || echo \"Ingress controller not found in standard namespaces\"'"
    
    # Verify Ingress host configuration
    - |
      echo "Verifying Ingress host configuration..."
      INGRESS_HOST=$(ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'sudo kubectl get ingress wordpress-ingress -n wordpress -o jsonpath=\"{.spec.rules[0].host}\"'")
      echo "Configured Ingress host: $INGRESS_HOST"
    
    # Wait longer for Ingress rules to propagate
    - echo "Waiting for Ingress rules to propagate..."
    - sleep 60
    
    # Try direct access to Ingress without port (matching wordpress-deploy.sh)
    - |
      echo "Checking WordPress availability via Ingress (direct access)..."
      RESPONSE=$(ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'curl -L -s --retry 5 --retry-delay 10 -o /dev/null -w %{http_code} http://$MASTER_IP.nip.io'") || echo "Ingress check failed, but continuing verification"
      echo "Ingress Check Result (direct access): $RESPONSE"
      if [[ "$RESPONSE" == "200" ]]; then echo "✅ Ingress check passed"; else echo "⚠️ Ingress check returned non-200 response"; fi
      
      if [[ "$RESPONSE" != "200" ]]; then
        echo "Trying alternative Ingress access methods..."
        
        echo "Method 1: Using Host header with direct IP..."
        RESPONSE2=$(ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'curl -L -s --retry 5 --retry-delay 10 -H \"Host: $MASTER_IP.nip.io\" -o /dev/null -w %{http_code} http://$MASTER_IP'") || echo "Alternative Ingress check failed"
        echo "Alternative Ingress Check Result (Method 1): $RESPONSE2"
        if [[ "$RESPONSE2" == "200" ]]; then echo "✅ Alternative Ingress check passed"; fi
        
        echo "Method 2: Using NodePort 30080..."
        RESPONSE3=$(ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'curl -L -s --retry 5 --retry-delay 10 -H \"Host: $MASTER_IP.nip.io\" -o /dev/null -w %{http_code} http://$MASTER_IP:30080'") || echo "Alternative Ingress check failed"
        echo "Alternative Ingress Check Result (Method 2): $RESPONSE3"
        if [[ "$RESPONSE3" == "200" ]]; then echo "✅ Alternative Ingress check passed"; fi
      fi
    
    # Enhanced health checks (with redirect following)
    - |
      echo "Checking WordPress login page..."
      LOGIN_CHECK=$(ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'curl -L -s --retry 3 --retry-delay 5 http://$MASTER_IP:32412/wp-login.php | grep -c \"WordPress\"'") || echo "Login page check failed"
      if [[ "$LOGIN_CHECK" -gt 0 ]]; then echo "✅ WordPress login page check passed"; else echo "⚠️ WordPress login page check failed"; fi
    
    # Summary
    - echo "Verification completed at $(date)!"
    - echo "At least one access method should return HTTP 200 for the deployment to be considered successful."
  rules:
    - if: $CI_COMMIT_BRANCH == "asm"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "development"
    - if: $CI_COMMIT_BRANCH == "monitoring"
  needs:
    - deploy

# Quality Assurance testing
qa:
  stage: qa
  image: $CUSTOM_IMAGE
  before_script:
    - /usr/local/bin/ssh-setup.sh
    - echo "Starting QA tests at $(date)"
  script:
    # Run API tests
    - echo "Running WordPress API tests..."
    - |
      ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c 'cd ~/$REMOTE_DIR && 
      ./tests/api-tests.sh $MASTER_IP'"
    
    # Run unit tests inside WordPress pod
    - echo "Running WordPress unit tests..."
    - |
      ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c '
      WP_POD=\$(sudo kubectl get pod -l app=wordpress -n wordpress -o jsonpath=\"{.items[0].metadata.name}\")
      echo "Using WordPress pod: \$WP_POD"
      sudo kubectl cp ~/$REMOTE_DIR/tests/unit-tests.php wordpress/\$WP_POD:/tmp/unit-tests.php
      sudo kubectl exec \$WP_POD -n wordpress -- php /tmp/unit-tests.php
      '"
    
    # Security scan
    - echo "Running security scan..."
    - |
      ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c '
      echo \"Checking for exposed sensitive endpoints...\"
      ADMIN_EXPOSED=\$(curl -s -o /dev/null -w \"%{http_code}\" http://$MASTER_IP:32412/wp-admin/install.php)
      if [ \"\$ADMIN_EXPOSED\" == \"200\" ] || [ \"\$ADMIN_EXPOSED\" == \"302\" ]; then
        echo \"⚠️ Warning: WordPress installation page might be accessible\"
      else
        echo \"✅ WordPress installation page properly secured\"
      fi
      
      echo \"Checking WordPress version disclosure...\"
      VERSION_CHECK=\$(curl -s http://$MASTER_IP:32412 | grep -c \"meta name=\\\"generator\\\"\" || true)
      if [ \"\$VERSION_CHECK\" -gt 0 ]; then
        echo \"⚠️ Warning: WordPress version might be exposed in HTML\"
      else
        echo \"✅ WordPress version properly hidden\"
      fi
      '"
    
    # Performance test
    - echo "Running basic performance test..."
    - |
      ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c '
      echo \"Testing response time...\"
      RESPONSE_TIME=\$(curl -s -w \"Time: %{time_total}s\n\" -o /dev/null http://$MASTER_IP:32412)
      echo \"\$RESPONSE_TIME\"
      
      echo \"Testing concurrent connections...\"
      for i in {1..5}; do
        curl -s http://$MASTER_IP:32412 > /dev/null &
      done
      wait
      echo \"Concurrent connection test completed\"
      '"
    
    - echo "QA testing completed at $(date)!"
  rules:
    - if: $CI_COMMIT_BRANCH == "asm"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "development"
    - if: $CI_COMMIT_BRANCH == "monitoring"
  needs:
    - verify
  allow_failure: true

# Comprehensive cleanup job
cleanup:
  stage: cleanup
  image: $CUSTOM_IMAGE
  before_script:
    - /usr/local/bin/ssh-setup.sh
  script:
    - echo "Starting cleanup process at $(date)..."
    - |
      if [[ "$CI_COMMIT_BRANCH" == "main" ]]; then
        echo "Cleanup is skipped for main branch"
        exit 0
      fi
    
    - echo "Removing all WordPress resources..."
    - |
      ssh -i ~/.ssh/$SSH_KEY_NAME.pem ubuntu@$MASTER_IP "bash -l -c '
        echo \"Removing ingress resources...\"
        sudo kubectl delete ingress -n wordpress --all
        
        echo \"Removing service resources...\"
        sudo kubectl delete svc -n wordpress --all
        
        echo \"Removing deployment resources...\"
        sudo kubectl delete deployment -n wordpress --all
        
        echo \"Removing statefulset resources...\"
        sudo kubectl delete statefulset -n wordpress --all
        
        echo \"Removing configmap resources...\"
        sudo kubectl delete configmap -n wordpress --all
        
        echo \"Removing secret resources...\"
        sudo kubectl delete secret -n wordpress --all
        
        echo \"Waiting for pods to terminate...\"
        timeout 60 bash -c \"until [ \\\$(sudo kubectl get pods -n wordpress --no-headers | wc -l) -eq 0 ]; do sleep 5; done\" || echo \"Pod termination timed out\"
        
        echo \"Removing PVC resources...\"
        sudo kubectl delete pvc -n wordpress --all
        
        echo \"Removing namespace...\"
        sudo kubectl delete namespace wordpress
        
        echo \"Removing local files...\"
        rm -rf ~/$REMOTE_DIR
      '"
    
    - echo "Cleanup completed at $(date)!"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
    - if: $CI_COMMIT_BRANCH == "development"
    - if: $CI_COMMIT_BRANCH == "asm"
    - if: $CI_COMMIT_BRANCH == "monitoring"
      when: manual
  environment:
    name: $CI_COMMIT_BRANCH
    action: stop
  needs:
    - build-pipeline-image
  